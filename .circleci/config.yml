# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
# Adopted from
# https://github.com/facebookresearch/detectron2/blob/master/.circleci/config.yml

version: 2

# -------------------------------------------------------------------------------------
# Environments to run the jobs in
# -------------------------------------------------------------------------------------
cpu_py38: &cpu_py38
  docker:
    - image: circleci/python:3.8
  resource_class: large

gpu: &gpu
  environment:
    CUDA_VERSION: "11.1"
    CUDA_HOME: /usr/local/cuda-11.1
  machine:
    image: ubuntu-1604-cuda-11.1:202012-01
  resource_class: gpu.large

# -------------------------------------------------------------------------------------
# Re-usable commands
# -------------------------------------------------------------------------------------
setup_venv: &setup_venv
  - run:
      name: Setup Virtual Env
      working_directory: ~/
      command: |
        python -m venv ~/venv
        echo ". ~/venv/bin/activate" >> $BASH_ENV
        . ~/venv/bin/activate
        python --version
        which python
        which pip
        pip install --upgrade pip

install_dep_181: &install_dep_181
  - run:
      name: Install Dependencies with torch 1.8.1
      command: |
        # check if we have restored venv cache (/home/circleci/venv) correctly, if so, just skip
        if [ -f /home/circleci/venv/check_version.py ]; then python /home/circleci/venv/check_version.py torch eq 1.8 && exit 0; fi
        # start installing
        pip install --progress-bar off torch==1.8.1+cu111 torchvision==0.9.1+cu111 -f https://download.pytorch.org/whl/torch_stable.html
        pip install --progress-bar off -r requirements-benchmark.txt
        python -c 'import torch; print("Torch version:", torch.__version__)'
        python -c 'import torch; assert torch.__version__.split(".")[:2] == ["1", "8"], "wrong torch version"'
        python -m torch.utils.collect_env
        wget -O /home/circleci/venv/check_version.py https://raw.githubusercontent.com/min-xu-ai/check_verion/main/check_version.py

install_repo: &install_repo
  - run:
      name: Install Repository
      command: |
        python3 -m pip install -e .
        # Test import.
        python -c 'import sys; sys.path = sys.path[1:]; import xformers'


run_isort: &run_isort
   - run:
       name: Run Linter (isort)
       command: |
         isort . --check --profile black

run_black: &run_black
   - run:
       name: Run Linter (black)
       command: |
         black --check .

run_mypy: &run_mypy
   - run:
       name: Run type-checking (mypy)
       command: |
         mypy --ignore-missing-imports --scripts-are-modules --pretty --exclude build/ .

run_flake8: &run_flake8
  - run:
      name: Run Linter (flake8)
      command: |
        flake8 --show-source --statistics

run_clang_format: &run_clang_format
  - run:
      name: Run Linter (clang-format)
      command: |
        curl https://oss-clang-format.s3.us-east-2.amazonaws.com/linux64/clang-format-linux64 -o clang-format
        chmod +x clang-format
        sudo mv clang-format /opt/clang-format
        ./.circleci/run-clang-format.py -r xformers/components/attention/csrc --clang-format-executable /opt/clang-format

run_coverage: &run_coverage
  - run:
      name: Run Unit Tests With Coverage
      command: |
        pytest --junitxml=test-results/junit.xml --verbose --timeout 600 --cov-report=xml --cov=./
        #Uploading test coverage for Python code
        bash <(curl -s https://codecov.io/bash) -f coverage.xml -cF Python

run_unittests: &run_unittests
  - run:
      name: Run Unit Tests
      command: |
        pytest --junitxml=test-results/junit.xml --verbose --timeout 600

run_benchmarks: &run_benchmarks
  - run:
      name: Run Benchmarks
      command: |
        CUDA_LAUNCH_BLOCKING=1 python3 benchmarks/benchmark_encoder.py

# -------------------------------------------------------------------------------------
# Jobs to run
# -------------------------------------------------------------------------------------

jobs:
  cpu_tests_py38:
    <<: *cpu_py38

    working_directory: ~/xformers

    steps:
      - checkout

      - <<: *setup_venv

      # Cache the venv directory that contains dependencies
      - restore_cache:
          keys:
            - cache-key-cpu-py38-181-386-{{ checksum "requirements-test.txt"}}

      - <<: *install_dep_181

      - save_cache:
          paths:
            - ~/venv
          key: cache-key-cpu-py38-181-386-{{ checksum "requirements-test.txt"}}

      - <<: *install_repo

      - <<: *run_isort
      - <<: *run_black
      - <<: *run_mypy
      - <<: *run_flake8
      - <<: *run_clang_format
      - <<: *run_unittests

      - store_test_results:
          path: test-results


  gpu_tests_181:
    <<: *gpu

    working_directory: ~/xformers

    steps:
      - checkout

      - run: nvidia-smi

      - run: pyenv global 3.8.6

      - <<: *setup_venv

      # Cache the venv directory that contains dependencies
      - restore_cache:
          keys:
            - cache-key-gpu-181-386-{{ checksum "requirements-test.txt"}}

      - <<: *install_dep_181

      - save_cache:
          paths:
            - ~/venv
          key: cache-key-gpu-181-386-{ checksum "requirements-test.txt"}}

      - <<: *install_repo

      - <<: *run_coverage

      # FIXME: Benjamin
      # - <<: *run_benchmarks

      - store_test_results:
          path: test-results


workflows:
  version: 2
  build:
    jobs:
      - cpu_tests_py38
      - gpu_tests_181
